import * as firebase from 'firebase';
import UserService from './services/firebase-user-service';
import ProjectService from './services/firebase-project-service';
import BoardService from './services/firebase-board-service';
import TaskService from './services/firebase-task-service';
import DesignLogService from './services/firebase-design-log-service';

export default class Firebase {
    constructor() {
        // Initializes firebase
        firebase.initializeApp({
            apiKey: `${process.env.REACT_APP_FIREBASE_API_KEY}`,
            authDomain: `${process.env.REACT_APP_FIREBASE_AUTH_DOMAIN}`,
            projectId: `${process.env.REACT_APP_PROJECT_ID}`,
        });

        // Initializes and configures firestore
        this._kanbanDB = firebase.firestore();

        this._kanbanDB.settings({
            timestampsInSnapshots: true
        });

        this.userService = new UserService(this._kanbanDB);
        this.projectService = new ProjectService(this._kanbanDB);
        this.boardService = new BoardService(this._kanbanDB);
        this.taskService = new TaskService(this._kanbanDB);
        this.designLogService = new DesignLogService(this._kanbanDB);
    }

    // Ends firebase session
    signOut = async () => await firebase.auth().signOut();

    // Receives a custom token generated by the server and uses it to authenticate with Firebase
    setToken = async (token) => await firebase.auth().signInWithCustomToken(token);

    // Adds a callback to the state listener that will be called whenever the authentication state changes
    setAuthStateListener = (listener) => firebase.auth().onAuthStateChanged(listener);

    getCurrentUser = () => firebase.auth().currentUser;

    updateProfile = async (profile) => {
        if (!firebase.auth().currentUser) {
            return;
        }

        let userData = await this.userService.insertUserWithAuth0Profile(profile);

        await firebase.auth().currentUser.updateProfile({
            displayName: userData.name,
            photoURL: userData.avatarUrl,
        });

        await firebase.auth().currentUser.linkWithPopup(new firebase.auth.GoogleAuthProvider())
            .then(result => console.log(result))
            .catch(err => console.log(err));

        return userData;
    }

}